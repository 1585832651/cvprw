2024-02-14 00:41:28,557 INFO: Use wandb logger with id=ltrbr4la; project=CVHSSR_T_baseline.
2024-02-14 00:41:28,562 INFO: Dataset PairedStereoImageDataset - Flickr1024-sr-train is created.
2024-02-14 00:41:28,562 INFO: Training statistics:
	Number of train images: 1600
	Dataset enlarge ratio: 1
	Batch size per gpu: 12
	World size (gpu number): 2
	Require iter number per epoch: 67
	Total epochs: 2986; iters: 200000.
2024-02-14 00:41:28,563 INFO: Dataset PairedStereoImageDataset - Flickr1024-sr-test is created.
2024-02-14 00:41:28,563 INFO: Number of val images/folders in Flickr1024-sr-test: 160
2024-02-14 00:41:32,730 INFO: Network: DistributedDataParallel - CVHSSR, with parameters: 678,000
2024-02-14 00:41:32,731 INFO: CVHSSR(
  (intro): Conv2d(3, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): MySequential(
    (0): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (2): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (3): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (5): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (6): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (8): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (9): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (10): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (11): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (12): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (13): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (14): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (15): DropPath(
      (module): CHIMBSR(
        (blk): CHIMB(
          (conv1): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (sca1): LKA(
            (conv0): Conv2d(48, 48, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=48)
            (conv_spatial): Conv2d(48, 48, kernel_size=(7, 7), stride=(1, 1), padding=(9, 9), dilation=(3, 3), groups=48)
            (conv1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sca2): Sequential(
            (0): AvgPool2d(kernel_size=[45, 135], base_size=(45, 135), stride=[45, 135], fast_imp=False)
            (1): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          )
          (sg): SimpleGate()
          (conv4): Conv2d(48, 96, kernel_size=(1, 1), stride=(1, 1))
          (conv5): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=96)
          (conv6): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (norm1): LayerNorm2d()
          (norm2): LayerNorm2d()
          (dropout1): Identity()
          (dropout2): Identity()
        )
        (fusion): CVIM(
          (norm_l): LayerNorm2d()
          (norm_r): LayerNorm2d()
          (l_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj1): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (r_proj2): Sequential(
            (0): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
            (1): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48)
          )
          (l_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
          (r_proj3): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
  (up): Sequential(
    (0): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): PixelShuffle(upscale_factor=4)
  )
)
2024-02-14 00:41:32,738 INFO: Model [ImageRestorationModel] is created.
.. cosineannealingLR
2024-02-14 00:41:33,970 INFO: Start training from epoch: 0, iter: 0
2024-02-14 00:41:41,889 INFO: Reducer buckets have been rebuilt in this iteration.
